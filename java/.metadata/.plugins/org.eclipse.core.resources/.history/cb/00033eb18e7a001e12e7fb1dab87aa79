package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Pedido;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import connection.ConnectionFactory;
import dao.PedidoDAO;

@WebServlet("/Pedido")
public class PedidoController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public PedidoController() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");

		try {
			Connection conexao = ConnectionFactory.createConnectionToMySQL();
			PedidoDAO pedidoDAO = new PedidoDAO(conexao);

			if ("listar".equals(action)) {
				List<Pedido> pedidos = pedidoDAO.listarPedidos();
				String html = "";

				for (Pedido pedido : pedidos) {
					html += "<tr>";
					html += "<td>" + pedido.getIdPedido() + "</td>";
					html += "<td>" + pedido.getDataPedido() + "</td>";
					html += "<td>" + pedido.getDiariasPedido() + "</td>";
					html += "<td>" + pedido.getValorPedido() + "</td>";
					html += "<td>" + pedido.getFk_pacote_idPacote() + "</td>";
					html += "<td>" + pedido.getFk_cliente_cpf() + "</td>";
					html += "</tr>";
				}

				response.getWriter().write(html);
			} else {
				// Se ação não for listar, carregue a lista de pedidos
				List<Pedido> pedidos = pedidoDAO.listarPedidos();
				request.setAttribute("pedidos", pedidos);

				// Encaminhe para a página de pedidos (por exemplo, pedido.jsp)
				request.getRequestDispatcher("pedido.jsp").forward(request, response);
			}

			conexao.close();
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro interno do servidor.");
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");

		try {
			Connection conexao = ConnectionFactory.createConnectionToMySQL();
			PedidoDAO pedidoDAO = new PedidoDAO(conexao);

			if ("adicionar".equals(action)) {
				adicionarPedido(request, response, pedidoDAO);
			} else if ("atualizar".equals(action)) {
				atualizarPedido(request, response, pedidoDAO);
			} else if ("excluir".equals(action)) {
				excluirPedido(request, response, pedidoDAO);
			}

			conexao.close();
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro interno do servidor.");
		}
	}

	private void adicionarPedido(HttpServletRequest request, HttpServletResponse response, PedidoDAO pedidoDAO)
			throws ServletException, IOException {
		// Lógica para adicionar um novo pedido
		int idPedido = 0; // Defina o ID do pedido conforme necessário
		Date dataPedido = new Date(System.currentTimeMillis());
		int diariasPedido = Integer.parseInt(request.getParameter("diariasPedido"));
		int fk_pacote_idPacote = Integer.parseInt(request.getParameter("fk_pacote_idPacote"));
		String fk_cliente_cpf = request.getParameter("fk_cliente_cpf");

		// Calcule o valor do pedido
		BigDecimal valorDiaria = getValorDiaria(fk_pacote_idPacote); // Substitua pelo método de busca do valor da
																		// diária
		BigDecimal valorTotal = valorDiaria.multiply(BigDecimal.valueOf(diariasPedido));

		Pedido pedido = new Pedido();
		pedido.setIdPedido(idPedido);
		pedido.setDataPedido(dataPedido);
		pedido.setDiariasPedido(diariasPedido);
		pedido.setValorPedido(valorTotal); // Use o valorTotal calculado
		pedido.setFk_pacote_idPacote(fk_pacote_idPacote);
		pedido.setFk_cliente_cpf(fk_cliente_cpf);

		if (pedidoDAO.adicionarPedido(pedido)) {
			response.getWriter().write(
					"<script>alert('Pedido cadastrado com sucesso!'); window.location.href='pedidos.jsp';</script>");
		} else {
			response.getWriter()
					.write("<script>alert('Falha ao cadastrar pedido!'); window.location.href='pedidos.jsp';</script>");
		}
	}

	private BigDecimal getValorDiaria(int fk_pacote_idPacote) {
		// Lógica para obter o valor da diária com base no fk_pacote_idPacote
		BigDecimal valorDiaria = BigDecimal.ZERO; // Valor inicial

		try {
			// Conecte ao banco de dados e execute a consulta
			Connection conexao = ConnectionFactory.createConnectionToMySQL();
			String sql = "SELECT valorDiaria FROM pacote WHERE idPacote = ?";

			try (PreparedStatement pstmt = conexao.prepareStatement(sql)) {
				pstmt.setInt(1, fk_pacote_idPacote);
				ResultSet resultSet = pstmt.executeQuery();

				if (resultSet.next()) {
					valorDiaria = resultSet.getBigDecimal("valorDiaria");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			} finally {
				conexao.close(); // Lembre-se de fechar a conexão com o banco de dados
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return valorDiaria;
	}

	private void atualizarPedido(HttpServletRequest request, HttpServletResponse response, PedidoDAO pedidoDAO)
			throws ServletException, IOException {
		// Recuperar o idPedido da solicitação
		String idPedidoParam = request.getParameter("idPedido");

		// Verificar se o idPedidoParam não é nulo e não está vazio
		if (idPedidoParam != null && !idPedidoParam.isEmpty()) {
			int idPedido = Integer.parseInt(idPedidoParam); // Converter para int

			// Recuperar outros parâmetros
			String diariasPedidoParam = request.getParameter("diariasPedido");
			String fk_pacote_idPacoteParam = request.getParameter("fk_pacote_idPacote");
			String fk_cliente_cpf = request.getParameter("fk_cliente_cpf");

			// Verificar se os outros parâmetros não são nulos e não estão vazios
			if (diariasPedidoParam != null && !diariasPedidoParam.isEmpty() && fk_pacote_idPacoteParam != null
					&& !fk_pacote_idPacoteParam.isEmpty()) {

				try {
					int diariasPedido = Integer.parseInt(diariasPedidoParam);
					int fk_pacote_idPacote = Integer.parseInt(fk_pacote_idPacoteParam);

					// Calcule o valor do pedido
					BigDecimal valorDiaria = getValorDiaria(fk_pacote_idPacote);
					BigDecimal valorTotal = valorDiaria.multiply(BigDecimal.valueOf(diariasPedido));

					Pedido pedido = new Pedido();
					pedido.setIdPedido(idPedido);
					pedido.setDataPedido(new Date(System.currentTimeMillis()));
					pedido.setDiariasPedido(diariasPedido);
					pedido.setValorPedido(valorTotal);
					pedido.setFk_pacote_idPacote(fk_pacote_idPacote);
					pedido.setFk_cliente_cpf(fk_cliente_cpf);
					
					System.out.println("ID do Pedido: " + idPedido);
					System.out.println("Diárias do Pedido: " + diariasPedido);
					System.out.println("ID do Pacote: " + fk_pacote_idPacote);
					System.out.println("CPF do Cliente: " + fk_cliente_cpf);


					if (pedidoDAO.atualizarPedido(pedido)) {
						response.getWriter().write(
								"<script>alert('Pedido atualizado com sucesso!'); window.location.href='pedidos.jsp';</script>");
					} else {
						response.getWriter().write(
								"<script>alert('Falha ao atualizar o pedido!'); window.location.href='pedidos.jsp';</script>");
					}
				} catch (NumberFormatException e) {
					response.getWriter().write(
							"<script>alert('Valores inválidos para diárias ou ID do Pacote!'); window.location.href='pedidos.jsp';</script>");
				}
			} else {
				response.getWriter().write(
						"<script>alert('Parâmetros ausentes ou vazios!'); window.location.href='pedidos.jsp';</script>");
			}
		} else {
			response.getWriter()
					.write("<script>alert('ID de Pedido inválido!'); window.location.href='pedidos.jsp';</script>");
		}
	}

	private void excluirPedido(HttpServletRequest request, HttpServletResponse response, PedidoDAO pedidoDAO)
			throws ServletException, IOException {
		// Lógica para excluir um pedido
		int idPedido = Integer.parseInt(request.getParameter("idPedido"));

		if (pedidoDAO.excluirPedido(idPedido)) {
			response.getWriter().write("Pedido excluído com sucesso!");
		} else {
			response.getWriter().write("Falha ao excluir o pedido.");
		}
	}
}

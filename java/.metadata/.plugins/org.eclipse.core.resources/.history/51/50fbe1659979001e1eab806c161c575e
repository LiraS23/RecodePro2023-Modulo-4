package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Cliente;

import java.io.IOException;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import connection.ConnectionFactory;
import dao.ClienteDAO;

@WebServlet("/ClienteController")
public class ClienteController extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public ClienteController() {
		super();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");

		try {
			Connection conexao = ConnectionFactory.createConnectionToMySQL();
			ClienteDAO clienteDAO = new ClienteDAO(conexao);

			if ("listar".equals(action)) {
				listarClientes(request, response, clienteDAO);
			}

			conexao.close();
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro interno do servidor.");
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");

		try {
			Connection conexao = ConnectionFactory.createConnectionToMySQL();
			ClienteDAO clienteDAO = new ClienteDAO(conexao);

			if ("adicionar".equals(action)) {
				adicionarCliente(request, response, clienteDAO);
			} else if ("atualizar".equals(action)) {
				atualizarCliente(request, response, clienteDAO);
			} else if ("excluir".equals(action)) {
				excluirCliente(request, response, clienteDAO);
			}

			conexao.close();
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro interno do servidor.");
		}
	}

	private void listarClientes(HttpServletRequest request, HttpServletResponse response, ClienteDAO clienteDAO)
			throws ServletException, IOException {
		List<Cliente> clientes = clienteDAO.listarClientes();
		request.setAttribute("clientes", clientes);
		request.getRequestDispatcher("listarClientes.jsp").forward(request, response);
	}

	private void adicionarCliente(HttpServletRequest request, HttpServletResponse response, ClienteDAO clienteDAO)
			throws ServletException, IOException {
		// Lógica para adicionar um novo cliente
		String cpf = request.getParameter("cpf");
		String nome = request.getParameter("nome");
		String dataNasc = request.getParameter("dataNasc");
		String email = request.getParameter("email");

		Cliente cliente = new Cliente();
		cliente.setCpf(cpf);
		cliente.setNome(nome);

		try {
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date dataNascimento = sdf.parse(dataNasc);
			cliente.setDataNasc(dataNascimento);
			cliente.setEmail(email);

			if (clienteDAO.adicionarCliente(cliente)) {
				String successMessage = "Cliente adicionado com sucesso!";
				response.sendRedirect("cliente.jsp?success=" + successMessage);
			} else {
				String errorMessage = "Falha ao adicionar o cliente.";
				response.sendRedirect("cliente.jsp?error=" + errorMessage);
			}
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro ao processar a data.");
		}
	}

	private void atualizarCliente(HttpServletRequest request, HttpServletResponse response, ClienteDAO clienteDAO)
			throws ServletException, IOException {
		// Lógica para atualizar um cliente
		String cpf = request.getParameter("cpf");
		String nome = request.getParameter("nome");
		String dataNasc = request.getParameter("dataNasc");
		String email = request.getParameter("email");

		Cliente cliente = new Cliente();
		cliente.setCpf(cpf);
		cliente.setNome(nome);

		try {
			SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
			Date dataNascimento = sdf.parse(dataNasc);
			cliente.setDataNasc(dataNascimento);
			cliente.setEmail(email);

			if (clienteDAO.atualizarCliente(cliente)) {
				response.getWriter().write("Cliente atualizado com sucesso!");
			} else {
				response.getWriter().write("Falha ao atualizar o cliente.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			response.getWriter().write("Erro ao processar a data.");
		}
	}

	private void excluirCliente(HttpServletRequest request, HttpServletResponse response, ClienteDAO clienteDAO)
			throws ServletException, IOException {
		// Lógica para excluir um cliente
		String cpf = request.getParameter("cpf");

		if (clienteDAO.excluirCliente(cpf)) {
			response.getWriter().write("Cliente excluído com sucesso!");
		} else {
			response.getWriter().write("Falha ao excluir o cliente.");
		}
	}
}
